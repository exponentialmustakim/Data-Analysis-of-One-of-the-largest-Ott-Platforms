# -*- coding: utf-8 -*-
"""Business Case: Netflix.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13rt4c0nj5kgdOch_1nCYA2Qvnc-hRoJf

# **About NETFLIX**
Netflix is one of the most popular media and video streaming platforms. They have over 10000 movies or tv shows available on their platform, as of mid-2021, they have over 222M Subscribers globally. This tabular dataset consists of listings of all the movies and tv shows available on Netflix, along with details such as - cast, directors, ratings, release year, duration, etc.

### Business Problem
Analysing the data and genarate insighs of Netflix  to decide which type of content should be produced and how to grow as a business in different countries and finding strategy to create more revenue

**Dataset**
Link:https://d2beiqkhq929f0.cloudfront.net/public_assets/assets/000/000/940/original/netflix.csv

This dataset is consists of these parameters and variables



Show_id: Unique ID for every Movie / Tv Show
Type: Identifier - A Movie or TV Show
Title: Title of the Movie / Tv Show
Director: Director of the Movie
Cast: Actors involved in the movie/show
Country: Country where the movie/show was produced
Date_added: Date it was added on Netflix
Release_year: Actual Release year of the movie/show
Rating: TV Rating of the movie/show
Duration: Total Duration - in minutes or number of seasons
Listed_in: Genre
Description: The summary description

# 1. Defining Problem Statement and Analysing basic metrics.

**Problem Statement**

Perform data exploration and visualisation on the Netflix dataset to uncover insights that could help Netflix in decisionmaking regarding which type of shows/movies to produce and how to grow the business in different countries.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
!gdown https://d2beiqkhq929f0.cloudfront.net/public_assets/assets/000/000/940/original/netflix.csv
df = pd.read_csv('netflix.csv')

# Commented out IPython magic to ensure Python compatibility.
import warnings
import re
import plotly.express as px
import plotly.graph_objs as go
import plotly.figure_factory as ff
warnings.filterwarnings('ignore')
# %matplotlib inline

df.info()

"""**Analysis of Basic Metrics**
 The dataset contains 8807 rows and 12 columns.
 It has the following attributes-

 Show id
 Type
 Title
 Director
 Cast
 Country
 Date added
 Release year
 Rating
 Duration
 Listed_in
 Description

# 2. Observations on the shape of data, data types of all the attributes, conversion of categorical attributes to 'category' (If required), missing value detection, statistical summary.
"""

# exploring the dataset
df.head()

df.tail()

#shape of the dataset
df.shape

#checking the columns
df.columns

#checking duplicate
df.duplicated().any()

#checking the number of missing values
df.isnull().sum()

(df.isnull().sum()).sum()

"""Above we can clearly see that there are some null values in the dataset. There are total 4307 null values present in the entire dataset out of which 2634 missing points under 'director', 831 under 'country', 825 under 'cast', 10 under 'date_added', 4 under 'rating', and 3 under 'duration'. so
before diving into EDA we first need to handle all these null values.
"""

# Statistical Summary of Netflix Dataset
df.describe()

"""Statistical Summary :
No of records available : 8807

mean of release year : 2014.18

Standard deviation of release year : 8.82

minimum of movies and TV Shows release year : 1925

25% of movies and TV Shows release year : 2013

50% of movies and TV Shows release year 2017

75% of movies and TV Shows release year 2019

max of movies and TV Shows release year 2021

# 3. Non-Graphical Analysis: Value counts and unique attributes.
"""

# No of Movies & TV Shows reclease in country
df['country'].str.split(',', expand=True).stack().value_counts()

df['country'].str.split(',')

df['country'].str.split(',',expand=True)

df['country'].str.split(',',expand=True).stack()

# No of Release from Directors
df['director'].str.split(',', expand=True).stack().value_counts()

# No of Movies & TV Shows done by actor
df['cast'].str.split(',', expand=True).stack().value_counts()

#movie release distribution
df.date_added.value_counts()

#number of releases per year
df.release_year.value_counts()

#ratings distribution
df.rating.value_counts()

df[df['type'] == "Movie"].duration.value_counts()

df[df['type'] == "TV Show"].duration.value_counts()

df['listed_in'].str.split(',', expand=True).stack().reset_index(level=1, drop=True).to_frame('Genres').value_counts()

df['listed_in'].str.split(',', expand=True).stack().value_counts()

# Number of unique data for each column
df.nunique()

"""The Type attribute has 2666 TV shows and 6131 Movies.
The Rating attribute has TV-MA ratings with 3209 occurrences followed by TV-14 with 2157 occurrences.
The Listed in attribute with the highest count is International Movies with 2624 occurrences.
** Unique Attributes** The dataset contains 748 unique countries, 8807 unique titles, 4528 unique directors, 7692 unique cast members and 17
unique rating

# 4. Visual Analysis - Univariate, Bivariate after pre-processing of the data.
"""

var=df['director'].apply(lambda x:str(x).split(', ' )).tolist()
df_director=pd.DataFrame(var,index=df['title'])
df_director=df_director.stack().reset_index()
df_director.rename(columns={0:'director'},inplace=True)
df_director.drop(['level_1'],axis=1,inplace=True)
df_director.head()

# unnesting the cast column
const=df['cast'].apply(lambda x:str(x).split(', ' )).tolist()
df_cast=pd.DataFrame(const,index=df['title'])
#df_cast=df_cast.stack().reset_index()
#df_cast.rename(columns={0:'actor'},inplace=True)
#df_cast.drop(['level_1'],axis=1,inplace=True)
df_cast.head()

# unnesting the country column

const=df['country'].apply(lambda x:str(x).split(', ' )).tolist()
df_country=pd.DataFrame(const,index=df['title'])
df_country=df_country.stack().reset_index()
df_country.rename(columns={0:'country'},inplace=True)
df_country.drop(['level_1'],axis=1,inplace=True)
df_country.head()

df.loc[df['duration'].isnull(),'duration']=df.loc[df['duration'].isnull(),'duration'].fillna(df['rating'])
df.loc[df['rating'].str.contains('min',na=False),'rating']='NR'
df.head()

# removing min from data
df['duration']=df['duration'].str.replace("min",'')
df.head()

df['duration_copy']=df['duration'].copy()
df.head()

df.loc[df['duration_copy'].str.contains('Season',na=False),'duration_copy']=0
df['duration_copy']=df['duration_copy'].astype('int')
df.head()

df['duration_copy'].unique()

df['duration'].unique()

"""# 4.1 For continuous variable(s): Distplot, countplot, histogram for univariate analysis."""

# Continous variable displot
sns.distplot(df['duration_copy'], kde_kws={'linewidth':2})
plt.xlabel('Duration of Movies & TV Shows')
plt.ylabel('Density')
plt.show()

# count plot for Top 20 Deirectors
filtered_directors = df.set_index('title').director.str.split(', ', expand=True).stack().reset_index(level=1, drop=True)
sns.countplot(y = filtered_directors, order=filtered_directors.value_counts().index[:20])
plt.title('Top 20 Directors on Netflix')
plt.xlabel('Count')
plt.ylabel('Directors')
plt.show()

# count plot for Top 20 Actors
filtered_cast = df.set_index('title').cast.str.split(', ', expand=True).stack().reset_index(level=1, drop=True)
sns.countplot(y = filtered_cast, order=filtered_cast.value_counts().index[:20])
plt.title('Top 20 Actors on Netflix')
plt.xlabel('Count')
plt.ylabel('Actors')
plt.show()

# count plot for Top 20 Genres
filtered_genres = df.set_index('title').listed_in.str.split(', ', expand=True).stack().reset_index(level=1, drop=True);

g = sns.countplot(y = filtered_genres, order=filtered_genres.value_counts().index[:20])
plt.title('Top 20 Genres on Netflix')
plt.xlabel('Titles')
plt.ylabel('Genres')
plt.show()

# count plot for Top 20 Countries
filtered_countries = df.set_index('title').country.str.split(', ', expand=True).stack().reset_index(level=1, drop=True);
g = sns.countplot(y = filtered_countries, order=filtered_countries.value_counts().index[:20])
plt.title('Top 20 Countries on Netflix')
plt.xlabel('Titles')
plt.ylabel('Country')
plt.show()

# Netflix content By Ratings.
sns.barplot(x=df.rating.value_counts(), y=df.rating.value_counts().index,data=df)
plt.xlabel('Rating for Movies & TV Shows')
plt.ylabel('Rating')
plt.title('Rating for Movies & TV Shows Count')
plt.show()

# Release Year wise count
sns.countplot(y="release_year",data=df, order = df.release_year.value_counts().index[0:15])
plt.xlabel('Movie & Tv Shows Count')
plt.ylabel('Release Year')
plt.title('Movies & TV Shows Releases Yearly')
plt.show()

"""# 4.2 For categorical variable(s): Boxplot. :"""

# The box plots tell more than just the average release year
plt.figure(figsize=(8,10))
sns.boxplot(y='release_year', x='rating', data=df)
sns.despine(left=True)
plt.xticks(rotation=90)
plt.ylim(1940,2023)
plt.xlabel('Rating')
plt.ylabel('Release Year')
plt.title('Type of Rating Given on Movie & TV Shows')
plt.show()

"""# 4.3 For correlation: Heatmaps, Pairplots."""

sns.pairplot(df)
plt.title('Pair Plot for Release year')
plt.show()

"""# 5. Missing Value & Outlier check (Treatment optional)."""

# unnesting the listed_in column
const=df['listed_in'].apply(lambda x:str(x).split(', ' )).tolist()
df_genre=pd.DataFrame(const,index=df['title'])
df_genre=df_genre.stack().reset_index()
df_genre.rename(columns={0:'genre'},inplace=True)
df_genre.drop(['level_1'],axis=1,inplace=True)
df_genre.head()

# merging the unnested director data with unnested actors data
df_merge1=df_cast.merge(df_director,on=['title'],how='inner')
# merging the above merge data with unnested genre data
df_merge2=df_merge1.merge(df_genre,on=['title'],how='inner')
# merging the above merged data with unnested country data
df_merge=df_merge2.merge(df_country,on=['title'],how='inner')
df_merge['actor'].replace(['nan'],['Unknown Actor'],inplace=True)
df_merge['director'].replace(['nan'],['Unknown Director'],inplace=True)
df_merge['country'].replace(['nan'],[np.nan],inplace=True)
df_merge.head()

# merging our unnested data with the original data
df_final=df_merge.merge(df[['show_id', 'type', 'title', 'date_added', 'release_year', 'rating', 'duration']],on=['title'],how='left')
df_final.head()

df_final.isnull().sum()

# In duration column, it was observed that the nulls had values
# which were written in corresponding ratings column,
 # i.e. you can't expect ratings to be in min. # So the duration column nulls are replaced by corresponding
# values in ratings column
df_final.loc[df_final['duration'].isnull(),'duration']=df_final.loc[df_final['duration'].isnull(),'duration'].fillna(df_final['rating'])
df_final.isnull().sum()

# Ratings can't be min, so it has been made NR(Non-Rated)
df_final.loc[df_final['rating'].str.contains('min',na=False),'rating']='NR'
df_final['rating'].fillna('NR',inplace=True)
df_final.isnull().sum()

# date added column is imputed on the basis of release year,i.e- suppose there's a null for date_added
# when release year was 2013.So below piece of code just checks the mode of date added for release year=2013
 # and imputes in place of nulls the corresponding mode
for i in df_final[df_final['date_added'].isnull()]['release_year'].unique():
  imp=df_final[df_final['release_year']==i]['date_added'].mode().values[0]
  df_final.loc[df_final['release_year']==i,'date_added']=df_final.loc[df_final['release_year']==i,'date_added'].fillna(imp)
df_final.isnull().sum()

# country column is imputed on the basis of director,i.e- suppose there's a null for country
# when we have a director whose other movies have a country given. # So below piece of code just checks the mode of country for the director
# and imputes in place of nulls the corresponding mode
for i in df_final[df_final['country'].isnull()]['director'].unique():
  if i in df_final[~df_final['country'].isnull()]['director'].unique():
    imp=df_final[df_final['director']==i]['country'].mode().values[0]
    df_final.loc[df_final['director']==i,'country']=df_final.loc[df_final['director']==i,'country'].fillna(imp)
df_final.isnull().sum()

# So we imputed the country column on the basis of directors
# whose other movie titles had countries given.
# But there might be directors who have only one occurence # in our data. In that scenario, I have used Actors as a basis.
# i.e- for this Actor majorly acts in movies of which country? # Imputation has been done on this basis. For remaining rows,
# country has been filled as Unknown Country
for i in df_final[df_final['country'].isnull()]['actor'].unique():
  if i in df_final[~df_final['country'].isnull()]['actor'].unique():
    imp=df_final[df_final['actor']==i]['country'].mode().values[0]
    df_final.loc[df_final['actor']==i,'country']=df_final.loc[df_final['actor']==i,'country'].fillna(imp)
df_final.isnull().sum()

# If there are still nulls, I just replace it by Unknown Country
df_final['country'].fillna('Unknown Country',inplace=True)
df_final.isnull().sum()

df_final.head()

"""# 6. Insights based on Non-Graphical and Visual Analysis."""

df_final['duration_copy']=df_final['duration'].copy()
df_final1=df_final.copy()
df_final1.loc[df_final1['duration_copy'].str.contains('Season'),'duration_copy']=0
df_final1['duration_copy']=df_final1['duration_copy'].astype('int')
df_final1.head()

# Converting the 'date_added' column to datetime format
df_final1["date_added"] = pd.to_datetime(df_final1['date_added'])
df_final1['month_added']=df_final1['date_added'].dt.month
df_final1['week_Added']=df_final1['date_added'].dt.week
df_final1['year']=df_final1['date_added'].dt.year
df_final1.head()

df_year=df_final1.groupby(['year']).agg({"title":"nunique"}).reset_index()
sns.lineplot(data=df_year,x='year',y='title')
plt.ylabel("Movies Released in the year")
plt.xlabel("Year")
plt.show()

"""The Amount of Content across Netflix has increased from 2008 continuously till 2019. Then started decreasing from here(probably due to Covid)"""

df_week=df_final1.groupby(['week_Added']).agg({"title":"nunique"}).reset_index()
plt.figure(figsize=(8,5))
sns.lineplot(data=df_week, x='week_Added', y='title')
plt.ylabel("Movies Released in the Week")
plt.xlabel("Week No.")
plt.show()

"""Most of the Content across Netflix is added in the first week of the year"""

df_month=df_final1.groupby(['month_added']).agg({"title":"nunique"}).reset_index()
sns.lineplot(data=df_month, x='month_added', y='title')
plt.ylabel("Movies Released in the Month")
plt.xlabel("Month")
plt.show()

"""Most of the content is added in the first and last months across Netflix

# 6.1 Comments on the range of attributes.

The data ranges from 1925 to 2021, containing international TV shows and movies with multiple genres and ratings.

We can see that there are total 8807 rows and 12 columns present in the dataset. the summary also includes list of all columns with their data types and the number of non-null values in each column.

The data distributed across years and ranges from 1925 to 2021 with an average of 2014. Duration: The duration data ranges for TV Show is 1 to 16 Seasons with a mean of 1.7, and for Movies is 1 to 312 minutes with a mean of 99.4minutes.

# 6.2 Comments on the distribution of the variables and relationship between them

The data is mostly based on avarage values,we see a trend of declining releases after 2020

most of the releases were during 1st or last week of the year

The duration of movies and tv shows are declining in length with year

# 6.3 Comments for each univariate and bivariate plot

Univariate and Bivariate plots show that the data is centred around the average value, with a few observations having values much higher or lower. A few outliers are detected in the duration attribute. The distribution of
duration in minutes for different types of TV shows and movies does not show any significant differences.

# Business Insights.

This data analysis shows that the short duration movies and tv series are more popular among viewers.TV-MA  has the most viewers ,so these kind of contents should be pushed more.
inernational movies and drama is popular irrespective of country .

Drama and comedy are most viewed genre

United States is leading across both TV Shows and Movies, UK also provides great content across TV Shows and Movies. Surprisingly India is much more prevalent in Movies as compared TV Shows.

# 8. Recommendations.

1.   As Drama and comedy is the most popular genre then more content like those can be released
2.   Indian market is more prevalent movies as compared to tvs so more movies can be relaesed than TV shows
3.   Shorter length contents have more viewership,so those kind of content can be released more
4. The releases are more during 1st or last quarter of the year,so release dates can be distributed in a way that there is a uniformity,so that it can engage viewers whole year,and earning more profit through continueous subscription
"""